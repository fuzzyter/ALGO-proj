#define _CRT_SECURE_NO_WARNINGS
#define INF 1000

#include <stdio.h>
#include <stdlib.h>
#include <string.h>

// 학생 구조체 정의
struct student {
    char name[50];
    int age;
    char sex[3];            // "남" 또는 "여" 중 하나
    char phoneNumber[20];    // "010-0000-1111"
    char position[30];       // 예: 회장, 부회장, 일반 부원 등
    char birth[11];          // 생일, 예: "2004.07.25"
    char department[50];     // 학과 정보
    int schoolYear;          // 학년
    int schoolNumber;        // 학번
    struct student* next;    // 다음 노드 포인터 (연결 리스트 구조)
};

// 리스트 헤드와 테일 정의
struct student* head = NULL;
struct student* tail = NULL;

// 학생 생성 함수
void make_student(void) {
    head = (struct student*)malloc(sizeof(struct student));
    tail = (struct student*)malloc(sizeof(struct student));
    head->next = tail;
    tail->next = NULL;
}

// 학생 입력 (추가) 함수
struct student* insert_student(void) {
    struct student* s = (struct student*)malloc(sizeof(struct student));

    // 이름, 나이, 성별, 전화번호, 직위, 생일, 학과, 학년, 학번 입력
    printf("이름: ");
    scanf("%s", s->name);
    printf("나이: ");
    scanf("%d", &s->age);
    printf("성별 (남/여): ");
    scanf("%s", s->sex);
    printf("전화번호 (예: 010-0000-1111): ");
    scanf("%s", s->phoneNumber);
    printf("직위: ");
    scanf("%s", s->position);
    printf("생일 (예: 2004.07.25): ");
    scanf("%s", s->birth);
    printf("학과: ");
    scanf("%s", s->department);
    printf("학년: ");
    scanf("%d", &s->schoolYear);
    printf("학번: ");
    scanf("%d", &s->schoolNumber);

    // 새로운 학생을 리스트에 추가
    s->next = head->next;
    head->next = s;

    return s;
}

// 학생 삭제 함수
void delete_student(void) {
    struct student* a = head;
    struct student* b = head->next;
    char name[50];

    printf("지울 이름을 입력하세요: ");
    scanf("%s", name);

    while (b != NULL) {
        if (strcmp(name, b->name) == 0) {
            a->next = b->next;
            free(b);
            printf("해당 학생을 삭제했습니다: %s\n", name);
            return;
        }
        a = b;
        b = b->next;
    }
    printf("찾는 이름이 없습니다.\n");
}

// 학생 검색 함수 (카테고리 별로 구별)
void search_student(void) {
    struct student* s = head->next;
    int category;
    char search_term[50];
    int search_number;

    printf("검색할 카테고리를 선택하세요:\n");
    printf("1. 이름\n");
    printf("2. 학과\n");
    printf("3. 나이\n");
    printf("4. 성별\n");
    printf("5. 학년\n");
    printf("카테고리 번호 입력 : ");
    scanf("%d", &category);
    while (getchar() != '\n'); //입력 버퍼 지우기

    int found = 0; // 검색 결과가 있는지 여부를 체크하기 위한 변수

    switch (category) {
    case 1: {
        printf("검색할 이름을 입력하세요: ");
        scanf("%s", search_term);
        while (getchar() != '\n');  // 입력 버퍼 비우기

        struct student* s1 = head->next;
        while (s1 != tail) {
            if (strcmp(search_term, s1->name) == 0) {
                found = 1;
                printf("\n=== 학생 정보 ===\n");
                printf("이름: %s\n", s1->name);
                printf("나이: %d\n", s1->age);
                printf("성별: %s\n", s1->sex);
                printf("전화번호: %s\n", s1->phoneNumber);
                printf("직위: %s\n", s1->position);
                printf("생일: %s\n", s1->birth);
                printf("학과: %s\n", s1->department);
                printf("학년: %d\n", s1->schoolYear);
                printf("학번: %d\n", s1->schoolNumber);
            }
            s1 = s1->next;
        }
        break;
    }

    case 2: {
        printf("검색할 학번을 입력하세요: ");
        scanf("%d", &search_number);

        struct student* s2 = head->next;
        while (s2 != tail) {
            if (s2->schoolNumber == search_number) {
                found = 1;
                printf("\n=== 학생 정보 ===\n");
                printf("이름: %s\n", s2->name);
                printf("나이: %d\n", s2->age);
                printf("성별: %s\n", s2->sex);
                printf("전화번호: %s\n", s2->phoneNumber);
                printf("직위: %s\n", s2->position);
                printf("생일: %s\n", s2->birth);
                printf("학과: %s\n", s2->department);
                printf("학년: %d\n", s2->schoolYear);
                printf("학번: %d\n", s2->schoolNumber);
            }
            s2 = s2->next;
        }
        break;
    }

    case 3: {
        printf("검색할 학과를 입력하세요: ");
        scanf("%s", search_term);
        while (getchar() != '\n');  // 입력 버퍼 비우기

        struct student* s3 = head->next;
        while (s3 != tail) {
            if (strcmp(search_term, s3->department) == 0) {
                found = 1;
                printf("\n=== 학생 정보 ===\n");
                printf("이름: %s\n", s3->name);
                printf("나이: %d\n", s3->age);
                printf("성별: %s\n", s3->sex);
                printf("전화번호: %s\n", s3->phoneNumber);
                printf("직위: %s\n", s3->position);
                printf("생일: %s\n", s3->birth);
                printf("학과: %s\n", s3->department);
                printf("학년: %d\n", s3->schoolYear);
                printf("학번: %d\n", s3->schoolNumber);
            }
            s3 = s3->next;
        }
        break;
    }

    case 4: {
        printf("검색할 직위를 입력하세요: ");
        scanf("%s", search_term);
        while (getchar() != '\n');  // 입력 버퍼 비우기

        struct student* s4 = head->next;
        while (s4 != tail) {
            if (strcmp(search_term, s4->position) == 0) {
                found = 1;
                printf("\n=== 학생 정보 ===\n");
                printf("이름: %s\n", s4->name);
                printf("나이: %d\n", s4->age);
                printf("성별: %s\n", s4->sex);
                printf("전화번호: %s\n", s4->phoneNumber);
                printf("직위: %s\n", s4->position);
                printf("생일: %s\n", s4->birth);
                printf("학과: %s\n", s4->department);
                printf("학년: %d\n", s4->schoolYear);
                printf("학번: %d\n", s4->schoolNumber);
            }
            s4 = s4->next;
        }
        break;
    }

    default:
        printf("잘못된 카테고리 번호입니다.\n");
        return;
    }

    if (!found) {
        printf("검색 결과가 없습니다.\n");
    }
}

// 학생 정보 수정 함수
void update_student(void) {
    struct student* s = head->next;
    char name[50];

    printf("수정할 학생의 이름을 입력하세요: ");
    scanf("%s", name);

    while (s != tail) {
        if (strcmp(name, s->name) == 0) {
            printf("=== 현재 정보 ===\n");
            printf("이름: %s\n", s->name);
            printf("나이: %d\n", s->age);
            printf("성별: %s\n", s->sex);
            printf("전화번호: %s\n", s->phoneNumber);
            printf("직위: %s\n", s->position);
            printf("생일: %s\n", s->birth);
            printf("학과: %s\n", s->department);
            printf("학년: %d\n", s->schoolYear);
            printf("학번: %d\n", s->schoolNumber);

            // 수정할 정보 입력
            printf("\n=== 새 정보 입력 ===\n");
            printf("나이: ");
            scanf("%d", &s->age);
            printf("성별 (남/여): ");
            scanf("%s", s->sex);
            printf("전화번호 (예: 010-0000-1111): ");
            scanf("%s", s->phoneNumber);
            printf("직위: ");
            scanf("%s", s->position);
            printf("생일 (예: 2004.07.25): ");
            scanf("%s", s->birth);
            printf("학과: ");
            scanf("%s", s->department);
            printf("학년: ");
            scanf("%d", &s->schoolYear);
            printf("학번: ");
            scanf("%d", &s->schoolNumber);

            printf("학생 정보가 수정되었습니다.\n");
            return;
        }
        s = s->next;
    }
    printf("찾는 이름의 학생이 없습니다.\n");
}

// 현재 리스트(전체) 출력 함수
void print_all_students(void) {
    struct student* s = head->next;  // head 다음부터 시작
    if (s == tail) {
        printf("현재 등록된 학생이 없습니다.\n");
        return;
    }

    printf("\n===== 전체 학생 명단 =====\n");
    while (s != tail) {
        printf("\n=== 학생 정보 ===\n");
        printf("이름: %s\n", s->name);
        printf("나이: %d\n", s->age);
        printf("성별: %s\n", s->sex);
        printf("전화번호: %s\n", s->phoneNumber);
        printf("직위: %s\n", s->position);
        printf("생일: %s\n", s->birth);
        printf("학과: %s\n", s->department);
        printf("학년: %d\n", s->schoolYear);
        printf("학번: %d\n", s->schoolNumber);
        s = s->next;
    }
    printf("==========================\n\n");
}

// 메뉴 출력 함수
void menu_display() {
    printf("===== 메뉴 =====\n");
    printf("A. 학생 추가\n");
    printf("D. 학생 삭제\n");
    printf("S. 학생 검색\n");
    printf("U. 학생 정보 수정\n");
    printf("P. 학생 전체 목록 출력\n");
    printf("Q. 프로그램 종료\n"); 
}

// 메인 함수
int main() {
    int key;
    char command;
    make_student();  // 초기화

    do {
        menu_display();
        printf("명령어를 입력하시오 :");
        command = getchar();
        while (getchar() != '\n'); //입력 버퍼 비우기 (엔터키 처리)

        switch (command) {
        case 'a' & 'A':
            insert_student();
            break;
        case 'd' & 'D':
            delete_student();
            break;

        case 's' & 'S':
            search_student();
            break;

        case 'u' & 'U':
            update_student();
            break;

        case 'p' & 'P':
            print_all_students();
            break;

        case 'q' & 'Q':
            printf("프로그램을 종료합니다.\n");
            break;

        default:
            printf("잘못된 명령어입니다\n");
            break;
        }
    } while (command != 'q' && 'Q');
    return 0;
}
